[{"title":"Install","type":0,"sectionRef":"#","url":"/Animations/docs/intro","content":"Install Get the roblox model and put it into your ReplicatedStorage. Basic Usage","keywords":""},{"title":"AutoCustomRBXAnimationIds","type":0,"sectionRef":"#","url":"/Animations/api/AutoCustomRBXAnimationIds","content":"On this page AutoCustomRBXAnimationIds Read OnlyServer Only note Roblox model path: Animations.Deps.AutoCustomRBXAnimationIds A table of animation ids to apply to player character's animate script, replacing default roblox animation ids on spawn if EnableAutoCustomRBXAnimationIds is enabled. -- All optional number values local AutoCustomRBXAnimationIds = { [Enum.HumanoidRigType.R6] = { -- [string]: number? | { [string]: number? } run = nil, walk = nil, jump = nil, idle = { Animation1 = nil, Animation2 = nil }, fall = nil, swim = nil, swimIdle = nil, climb = nil }, [Enum.HumanoidRigType.R15] = { -- [string]: number? | { [string]: number? } run = nil, walk = nil, jump = nil, idle = { Animation1 = nil, Animation2 = nil }, fall = nil, swim = nil, swimIdle = nil, climb = nil } } caution You should not delete the key = nil key-value pairs. They are meant to stay for ease of modification.","keywords":""},{"title":"AnimationIds","type":0,"sectionRef":"#","url":"/Animations/api/AnimationIds","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"AnimationIds","url":"/Animations/api/AnimationIds#types","content":" "},{"title":"rigType​","type":1,"pageTitle":"AnimationIds","url":"/Animations/api/AnimationIds#rigType","content":"&lt;/&gt; type rigType = string The first key in the AnimationIds module that indicates the type of rig the paired animation id table belongs to. local AnimationIds = { Player = { -- `rigType` of &quot;Player&quot; Dodge = { [Enum.KeyCode.W] = 0000000, [Enum.KeyCode.S] = 0000000, [Enum.KeyCode.A] = 0000000, [Enum.KeyCode.D] = 0000000, }, Run = 0000000, Walk = 0000000, Idle = 0000000 } } info The only preset rigType is that of &quot;Player&quot; for all player/client animation ids.  "},{"title":"animationId​","type":1,"pageTitle":"AnimationIds","url":"/Animations/api/AnimationIds#animationId","content":"&lt;/&gt; type animationId = number   "},{"title":"idTable​","type":1,"pageTitle":"AnimationIds","url":"/Animations/api/AnimationIds#idTable","content":"&lt;/&gt; interface idTable { [any]: idTable | animationId }   "},{"title":"AnimationIds​","type":1,"pageTitle":"AnimationIds","url":"/Animations/api/AnimationIds#AnimationIds","content":"&lt;/&gt; interface AnimationIds { [rigType]: idTable } local AnimationIds = { Player = { Dodge = { [Enum.KeyCode.W] = 0000000, [Enum.KeyCode.S] = 0000000, [Enum.KeyCode.A] = 0000000, [Enum.KeyCode.D] = 0000000, }, Run = 0000000, Walk = 0000000, Idle = 0000000 }, BigMonster = { HardMode = { Attack1 = 0000000, Attack2 = 0000000 }, EasyMode = { Attack1 = 0000000, Attack2 = 0000000 } }, SmallMonster = { HardMode = { Attack1 = 0000000, Attack2 = 0000000 }, EasyMode = { Attack1 = 0000000, Attack2 = 0000000 } } }  "},{"title":"Basic Usage","type":0,"sectionRef":"#","url":"/Animations/docs/basic-usage","content":"Basic Usage AnimationIds Configure your AnimationIds module: -- In ReplicatedStorage.Animations.Deps.AnimationIds local ninjaJumpR15AnimationId = 656117878 local AnimationIds = { Player = { -- Rig type of &quot;Player&quot; (required for any animations that will run on player characters) Jump = ninjaJumpR15AnimationId -- Path of &quot;Jump&quot; } } AnimationsServer Playing the animation when it gets auto loaded on a player character: -- In a ServerScript local Players = game:GetService(&quot;Players&quot;) local Animations = require(game.ReplicatedStorage.Animations.Package.AnimationsServer) Animations:Init({ AutoLoadPlayerTracks = true, -- Defaults to false TimeToLoadPrints = true -- Defaults to false (on the server) }) local function onPlayerAdded(player) Animations:AwaitLoaded(player) print(&quot;Finished loading animations for&quot;, player.Name) while true do print(&quot;Playing ninja jump animation for&quot;, player.Name) Animations:PlayTrack(player, &quot;Jump&quot;) task.wait(3) end end for _, player in ipairs(Players:GetPlayers()) do task.spawn(onPlayerAdded, player) end Players.PlayerAdded:Connect(onPlayerAdded) AnimationsClient Playing the animation when it gets auto loaded on the client: -- In a LocalScript local Animations = require(game.ReplicatedStorage.Animations.Package.AnimationsClient) Animations:Init({ AutoLoadPlayerTracks = true, -- Defaults to false TimeToLoadPrints = true -- Defaults to true (on the client) }) local player = game.Players.LocalPlayer local function onCharacterAdded(player) Animations:AwaitLoaded() print(&quot;Finished loading client animations&quot;) while true do print(&quot;Playing ninja jump client animation&quot;) Animations:PlayTrack(&quot;Jump&quot;) task.wait(3) end end if player.Character then onCharacterAdded(player.Character) end player.CharacterAdded:Connect(onCharacterAdded) ","keywords":""},{"title":"AnimationsClient","type":0,"sectionRef":"#","url":"/Animations/api/AnimationsClient","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#types","content":" "},{"title":"initOptions​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#initOptions","content":"&lt;/&gt; interface initOptions { AutoLoadPlayerTracks: boolean-- Defaults to false TimeToLoadPrints: boolean-- Defaults to true (on the client) } Gets applied to Properties.  "},{"title":"path​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#path","content":"&lt;/&gt; type path = any local Animations = require(game.ReplicatedStorage.Animations.Package.AnimationsClient) -- These are all valid options for retrieving an animation track local animationPath = &quot;Jump&quot; -- A single key (any type) local animationPath = {&quot;Dodge&quot;, Vector3.xAxis} -- An array path (values of any type) local animationPath = &quot;Climb.Right&quot; -- A path seperated by &quot;.&quot; (string) local animationTrack = Animations:GetTrack(animationPath)  "},{"title":"Properties​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#properties","content":" "},{"title":"AutoLoadPlayerTracks​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#AutoLoadPlayerTracks","content":"&lt;/&gt; AnimationsClient.AutoLoadPlayerTracks: false If set to true, client animation tracks will be loaded each time the client spawns. warning Must have animation ids under rigType of &quot;Player&quot; in the AnimationIds module.  "},{"title":"TimeToLoadPrints​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#TimeToLoadPrints","content":"&lt;/&gt; AnimationsClient.TimeToLoadPrints: true If set to true, prints will be made on each call to AnimationsClient:LoadTracks() to indicate the start, stop and elapsed time of pre-loading the client animation tracks. caution It is suggested to keep this as true because a lot of client animation tracks results in a significant yield time which is difficult to debug if forgotten. "},{"title":"Functions​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#functions","content":" "},{"title":"Init​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#Init","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; AnimationsClient:Init(initOptions: initOptions?) → () Initializes AnimationsClient. Yields if AnimationsClient.AutoLoadTracks is set to true and the player's character already exists. info Should be called once before any other method.  "},{"title":"AwaitLoaded​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#AwaitLoaded","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; AnimationsClient:AwaitLoaded() → () Yields until the client animation tracks have loaded.  "},{"title":"AwaitRigLoaded​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#AwaitRigLoaded","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; AnimationsClient:AwaitRigLoaded(rig: Model ) → () Yields until the rig animation tracks have loaded.  "},{"title":"AreTracksLoaded​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#AreTracksLoaded","content":"&lt;/&gt; AnimationsClient:AreTracksLoaded() → boolean Returns if the client has had its animation tracks loaded.  "},{"title":"AreRigTracksLoaded​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#AreRigTracksLoaded","content":"&lt;/&gt; AnimationsClient:AreRigTracksLoaded(rig: Model ) → boolean Returns if the rig has had its animation tracks loaded.  "},{"title":"LoadTracks​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#LoadTracks","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; AnimationsClient:LoadTracks() → () Yields while client animation tracks load.  "},{"title":"LoadRigTracks​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#LoadRigTracks","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; AnimationsClient:LoadRigTracks( rig: Model , rigType: string ) → () Yields while the rig animation tracks load.  "},{"title":"GetTrack​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#GetTrack","content":"&lt;/&gt; AnimationsClient:GetTrack(path: path) → AnimationTrack?  Returns a client animation track or nil.  "},{"title":"GetRigTrack​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#GetRigTrack","content":"&lt;/&gt; AnimationsClient:GetRigTrack( rig: Model , path: path ) → AnimationTrack?  Returns a rig animation track or nil.  "},{"title":"PlayTrack​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#PlayTrack","content":"&lt;/&gt; AnimationsClient:PlayTrack( path: path, fadeTime: number?, weight: number?, speed: number? ) → AnimationTrack  Returns a playing client animation track.  "},{"title":"PlayRigTrack​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#PlayRigTrack","content":"&lt;/&gt; AnimationsClient:PlayRigTrack( rig: Model , path: path, fadeTime: number?, weight: number?, speed: number? ) → AnimationTrack  Returns a playing rig animation track.  "},{"title":"StopTrack​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#StopTrack","content":"&lt;/&gt; AnimationsClient:StopTrack( path: path, fadeTime: number? ) → AnimationTrack  Returns a stopped client animation track.  "},{"title":"StopRigTrack​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#StopRigTrack","content":"&lt;/&gt; AnimationsClient:StopRigTrack( rig: Model , path: path, fadeTime: number? ) → AnimationTrack  Returns a stopped rig animation track.  "},{"title":"GetTrackFromAlias​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#GetTrackFromAlias","content":"&lt;/&gt; AnimationsClient:GetTrackFromAlias(alias: any) → AnimationTrack?  Returns a client animation track or nil.  "},{"title":"GetRigTrackFromAlias​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#GetRigTrackFromAlias","content":"&lt;/&gt; AnimationsClient:GetRigTrackFromAlias( rig: Model , alias: any ) → AnimationTrack?  Returns a rig animation track or nil.  "},{"title":"PlayTrackFromAlias​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#PlayTrackFromAlias","content":"&lt;/&gt; AnimationsClient:PlayTrackFromAlias( alias: any, fadeTime: number?, weight: number?, speed: number? ) → AnimationTrack  Returns a playing client animation track.  "},{"title":"PlayRigTrackFromAlias​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#PlayRigTrackFromAlias","content":"&lt;/&gt; AnimationsClient:PlayRigTrackFromAlias( rig: Model , alias: any, fadeTime: number?, weight: number?, speed: number? ) → AnimationTrack  Returns a playing rig animation track.  "},{"title":"StopTrackFromAlias​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#StopTrackFromAlias","content":"&lt;/&gt; AnimationsClient:StopTrackFromAlias( alias: any, fadeTime: number? ) → AnimationTrack  Returns a stopped client animation track.  "},{"title":"StopRigTrackFromAlias​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#StopRigTrackFromAlias","content":"&lt;/&gt; AnimationsClient:StopRigTrackFromAlias( rig: Model , alias: any, fadeTime: number? ) → AnimationTrack  Returns a stopped rig animation track.  "},{"title":"SetTrackAlias​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#SetTrackAlias","content":"&lt;/&gt; AnimationsClient:SetTrackAlias( alias: any, path: path ) → () Sets an alias to be the equivalent of the given path for a client animation track.  "},{"title":"SetRigTrackAlias​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#SetRigTrackAlias","content":"&lt;/&gt; AnimationsClient:SetRigTrackAlias( rig: Model , alias: any, path: path ) → () Sets an alias to be the equivalent of the given path for a rig animation track.  "},{"title":"RemoveTrackAlias​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#RemoveTrackAlias","content":"&lt;/&gt; AnimationsClient:RemoveTrackAlias(alias: any) → () Removes the alias for a client animation track.  "},{"title":"RemoveRigTrackAlias​","type":1,"pageTitle":"AnimationsClient","url":"/Animations/api/AnimationsClient#RemoveRigTrackAlias","content":"&lt;/&gt; AnimationsClient:RemoveRigTrackAlias( rig: Model , alias: any ) → () Removes the alias for a rig animation track. "},{"title":"AnimationsServer","type":0,"sectionRef":"#","url":"/Animations/api/AnimationsServer","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#types","content":" "},{"title":"initOptions​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#initOptions","content":"&lt;/&gt; interface initOptions { AutoLoadPlayerTracks: boolean-- Defaults to false TimeToLoadPrints: boolean-- Defaults to true (on the client) AutoCustomRBXAnimationIds: boolean-- Defaults to false } Gets applied to Properties.  "},{"title":"customRBXAnimationIds​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#customRBXAnimationIds","content":"&lt;/&gt; interface customRBXAnimationIds { run: number? walk: number? jump: number? idle: { Animation1: number?, Animation2: number? }? fall: number? swim: number? swimIdle: number? climb: number? } A table of animation ids to apply to player character's animate script, replacing default roblox animation ids.  "},{"title":"path​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#path","content":"&lt;/&gt; type path = any local Animations = require(game.ReplicatedStorage.Animations.Package.AnimationsServer) -- These are all valid options for retrieving an animation track local animationPath = &quot;Jump&quot; -- A single key (any type) local animationPath = {&quot;Dodge&quot;, Vector3.xAxis} -- An array path (values of any type) local animationPath = &quot;Climb.Right&quot; -- A path seperated by &quot;.&quot; (string) local animationTrack = Animations:GetTrack(player, animationPath)  "},{"title":"Properties​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#properties","content":" "},{"title":"AutoLoadPlayerTracks​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#AutoLoadPlayerTracks","content":"&lt;/&gt; AnimationsServer.AutoLoadPlayerTracks: false If set to true, player animation tracks will be loaded for each player character on spawn. warning Must have animation ids under rigType of &quot;Player&quot; in the AnimationIds module.  "},{"title":"TimeToLoadPrints​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#TimeToLoadPrints","content":"&lt;/&gt; AnimationsServer.TimeToLoadPrints: true If set to true, prints will be made on each call to AnimationsServer:LoadTracks() to indicate the start, stop and elapsed time of pre-loading the player or rig's animation tracks.  "},{"title":"EnableAutoCustomRBXAnimationIds​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#EnableAutoCustomRBXAnimationIds","content":"Server Only &lt;/&gt; AnimationsServer.EnableAutoCustomRBXAnimationIds: false If set to true, applies the AutoCustomRBXAnimationIds module table to each player character on spawn. "},{"title":"Functions​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#functions","content":" "},{"title":"Init​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#Init","content":"&lt;/&gt; AnimationsServer:Init(initOptions: initOptions?) → () Initializes AnimationsServer. info Should be called once before any other method.  "},{"title":"ApplyCustomRBXAnimationIds​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#ApplyCustomRBXAnimationIds","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Server Only &lt;/&gt; AnimationsServer:ApplyCustomRBXAnimationIds( player: Player , customRBXAnimationIds: customRBXAnimationIds ) → () Applies the animation ids specified in the given customRBXAnimationIds table on the given player's character. Yields if the player's character, humanoid, animator, or animate script aren't immediately available. local Animations = require(game.ReplicatedStorage.Animations.Package.AnimationsServer) Animations:Init() task.wait(5) print(&quot;Applying r15 ninja jump animation&quot;) Animations:ApplyCustomRBXAnimationIds(game.Players.YourName, { jump = 656117878, -- This is an r15 ninja jump animation }) caution Be aware that if the animation was created on a different HumanoidRigType than that of the player's character, the animation will not work. If you don't know what HumanoidRigType the player has, you can get around this by formatting the customRBXAnimationIds table like the AutoCustomRBXAnimationIds module table (with Enum.HumanoidRigType keys corresponding to animation ids created for that HumanoidRigType).  "},{"title":"AwaitLoaded​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#AwaitLoaded","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; AnimationsServer:AwaitLoaded(player_or_rig: Player | Model ) → () Yields until the player or rig's animation tracks have loaded. -- [WARNING] For this to work you need animation ids under the rig type of &quot;Player&quot; in the 'AnimationIds' module local Animations = require(game.ReplicatedStorage.Animations.Package.AnimationsServer) Animations:Init() Animations.AutoLoadTracks = true Animations.TimeToLoadPrints = true local player = game.Players:WaitForChild(&quot;MyName&quot;) Animations:AwaitLoaded(player) print(&quot;Animation tracks finished loading on the server!&quot;)   "},{"title":"AreTracksLoaded​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#AreTracksLoaded","content":"&lt;/&gt; AnimationsServer:AreTracksLoaded(player_or_rig: Player | Model ) → boolean Returns if the player or rig has had its animation tracks loaded.  "},{"title":"LoadTracks​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#LoadTracks","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; AnimationsServer:LoadTracks( player_or_rig: Player | Model , rigType: string ) → () Yields while the player or rig's animation tracks load.  "},{"title":"GetTrack​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#GetTrack","content":"&lt;/&gt; AnimationsServer:GetTrack( player_or_rig: Player | Model , path: path ) → AnimationTrack?  Returns a player or rig's animation track or nil.  "},{"title":"PlayTrack​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#PlayTrack","content":"&lt;/&gt; AnimationsServer:PlayTrack( player_or_rig: Player | Model , path: path, fadeTime: number?, weight: number?, speed: number? ) → AnimationTrack  Returns a playing player or rig's animation track.  "},{"title":"StopTrack​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#StopTrack","content":"&lt;/&gt; AnimationsServer:StopTrack( player_or_rig: Player | Model , path: path, fadeTime: number? ) → AnimationTrack  Returns a stopped player or rig's animation track.  "},{"title":"GetTrackFromAlias​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#GetTrackFromAlias","content":"&lt;/&gt; AnimationsServer:GetTrackFromAlias( player_or_rig: Player | Model , alias: any ) → AnimationTrack?  Returns a player or rig's animation track or nil.  "},{"title":"PlayTrackFromAlias​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#PlayTrackFromAlias","content":"&lt;/&gt; AnimationsServer:PlayTrackFromAlias( player_or_rig: Player | Model , alias: any, fadeTime: number?, weight: number?, speed: number? ) → AnimationTrack  Returns a playing player or rig's animation track.  "},{"title":"StopTrackFromAlias​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#StopTrackFromAlias","content":"&lt;/&gt; AnimationsServer:StopTrackFromAlias( player_or_rig: Player | Model , alias: any, fadeTime: number? ) → AnimationTrack  Returns a stopped player or rig's animation track.  "},{"title":"SetTrackAlias​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#SetTrackAlias","content":"&lt;/&gt; AnimationsServer:SetTrackAlias( player_or_rig: Player | Model , alias: any, path: path ) → () Sets an alias to be the equivalent of the given path for a player or rig's animation track.  "},{"title":"RemoveTrackAlias​","type":1,"pageTitle":"AnimationsServer","url":"/Animations/api/AnimationsServer#RemoveTrackAlias","content":"&lt;/&gt; AnimationsServer:RemoveTrackAlias( player_or_rig: Player | Model , alias: any ) → () Removes the alias for a player or rig's animation track. "}]