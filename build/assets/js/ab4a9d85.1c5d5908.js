"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[21],{97768:e=>{e.exports=JSON.parse('{"functions":[{"name":"Init","desc":"Initializes `AnimationsServer`.\\n\\n:::info\\nShould be called once before any other method.\\n:::","params":[{"name":"initOptions","desc":"","lua_type":"initOptions?"}],"returns":[],"function_type":"method","source":{"line":109,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"ApplyCustomRBXAnimationIds","desc":"Applies the animation ids specified in the given [`customRBXAnimationIds`](#customRBXAnimationIds) table on the given `player`\'s character. Yields if the `player`\'s character, humanoid, animator, or animate script aren\'t immediately available.\\n\\n```lua\\nlocal Animations = require(game.ReplicatedStorage.Animations.Package.AnimationsServer)\\n\\nAnimations:Init()\\n\\ntask.wait(5)\\n\\nprint(\\"Applying r15 ninja jump animation\\")\\n\\nAnimations:ApplyCustomRBXAnimationIds(game.Players.YourName, {\\n\\tjump = 656117878, -- This is an r15 ninja jump animation\\n})\\n```\\n\\n:::caution\\nBe aware that if the animation was created on a different `HumanoidRigType` than that of the player\'s character, the animation will not work. If you don\'t know what `HumanoidRigType` the player has, you can get around this by formatting the [`customRBXAnimationIds`](#customRBXAnimationIds) table like the [`AutoCustomRBXAnimationIds`](/api/AutoCustomRBXAnimationIds) module table (with [Enum.HumanoidRigType] keys corresponding to animation ids created for that `HumanoidRigType`).\\n:::","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"customRBXAnimationIds","desc":"","lua_type":"customRBXAnimationIds"}],"returns":[],"function_type":"method","tags":["Server Only"],"yields":true,"source":{"line":183,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"AwaitLoaded","desc":"Yields until the player or rig\'s animation tracks have loaded.\\n\\n```lua\\n-- [WARNING] For this to work you need animation ids under the rig type of \\"Player\\" in the \'AnimationIds\' module\\nlocal Animations = require(game.ReplicatedStorage.Animations.Package.AnimationsServer)\\n\\nAnimations:Init()\\n\\nAnimations.AutoLoadTracks = true\\nAnimations.TimeToLoadPrints = true\\n\\nlocal player = game.Players:WaitForChild(\\"MyName\\")\\n\\nAnimations:AwaitLoaded(player)\\n\\nprint(\\"Animation tracks finished loading on the server!\\")\\n```","params":[{"name":"player_or_rig","desc":"","lua_type":"Player | Model"}],"returns":[],"function_type":"method","yields":true,"source":{"line":236,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"AreTracksLoaded","desc":"Returns if the player or rig has had its animation tracks loaded.","params":[{"name":"player_or_rig","desc":"","lua_type":"Player | Model"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":245,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"LoadTracks","desc":"Yields while the player or rig\'s animation tracks load.","params":[{"name":"player_or_rig","desc":"","lua_type":"Player | Model"},{"name":"rigType","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","yields":true,"source":{"line":255,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"GetTrack","desc":"Returns a player or rig\'s animation track or nil.","params":[{"name":"player_or_rig","desc":"","lua_type":"Player | Model"},{"name":"path","desc":"","lua_type":"path"}],"returns":[{"desc":"","lua_type":"AnimationTrack?"}],"function_type":"method","source":{"line":265,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"PlayTrack","desc":"Returns a playing player or rig\'s animation track.","params":[{"name":"player_or_rig","desc":"","lua_type":"Player | Model"},{"name":"path","desc":"","lua_type":"path"},{"name":"fadeTime","desc":"","lua_type":"number?"},{"name":"weight","desc":"","lua_type":"number?"},{"name":"speed","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"AnimationTrack"}],"function_type":"method","source":{"line":278,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"StopTrack","desc":"Returns a stopped player or rig\'s animation track.","params":[{"name":"player_or_rig","desc":"","lua_type":"Player | Model"},{"name":"path","desc":"","lua_type":"path"},{"name":"fadeTime","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"AnimationTrack"}],"function_type":"method","source":{"line":289,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"GetTrackFromAlias","desc":"Returns a player or rig\'s animation track or nil.","params":[{"name":"player_or_rig","desc":"","lua_type":"Player | Model"},{"name":"alias","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"AnimationTrack?"}],"function_type":"method","source":{"line":299,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"PlayTrackFromAlias","desc":"Returns a playing player or rig\'s animation track.","params":[{"name":"player_or_rig","desc":"","lua_type":"Player | Model"},{"name":"alias","desc":"","lua_type":"any"},{"name":"fadeTime","desc":"","lua_type":"number?"},{"name":"weight","desc":"","lua_type":"number?"},{"name":"speed","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"AnimationTrack"}],"function_type":"method","source":{"line":312,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"StopTrackFromAlias","desc":"Returns a stopped player or rig\'s animation track.","params":[{"name":"player_or_rig","desc":"","lua_type":"Player | Model"},{"name":"alias","desc":"","lua_type":"any"},{"name":"fadeTime","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"AnimationTrack"}],"function_type":"method","source":{"line":323,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"SetTrackAlias","desc":"Sets an alias to be the equivalent of the given path for a player or rig\'s animation track.","params":[{"name":"player_or_rig","desc":"","lua_type":"Player | Model"},{"name":"alias","desc":"","lua_type":"any"},{"name":"path","desc":"","lua_type":"path"}],"returns":[],"function_type":"method","source":{"line":333,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"RemoveTrackAlias","desc":"Removes the alias for a player or rig\'s animation track.","params":[{"name":"player_or_rig","desc":"","lua_type":"Player | Model"},{"name":"alias","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":342,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}}],"properties":[{"name":"AutoLoadPlayerTracks","desc":"If set to true, player animation tracks will be loaded for each player character on spawn.\\n\\n:::warning\\nMust have animation ids under [`rigType`](/api/AnimationIds#rigType) of **\\"Player\\"** in the [`AnimationIds`](/api/AnimationIds) module.\\n:::","lua_type":"false","source":{"line":81,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"TimeToLoadPrints","desc":"If set to true, prints will be made on each call to [`AnimationsServer:LoadTracks()`](#LoadTracks) to indicate the start, stop and elapsed time of pre-loading the player or rig\'s animation tracks.","lua_type":"true","source":{"line":89,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"EnableAutoCustomRBXAnimationIds","desc":"If set to true, applies the [`AutoCustomRBXAnimationIds`](/api/AutoCustomRBXAnimationIds) module table to each player character on spawn.","lua_type":"false","tags":["Server Only"],"source":{"line":98,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}}],"types":[{"name":"initOptions","desc":"Gets applied to [`Properties`](#properties).","fields":[{"name":"AutoLoadPlayerTracks","lua_type":"boolean","desc":"Defaults to false"},{"name":"TimeToLoadPrints","lua_type":"boolean","desc":"Defaults to true (on the client)"},{"name":"AutoCustomRBXAnimationIds","lua_type":"boolean","desc":"Defaults to false"}],"source":{"line":19,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"customRBXAnimationIds","desc":"A table of animation ids to apply to player character\'s animate script, replacing default roblox animation ids.","fields":[{"name":"run","lua_type":"number?","desc":""},{"name":"walk","lua_type":"number?","desc":""},{"name":"jump","lua_type":"number?","desc":""},{"name":"idle","lua_type":"{Animation1: number?, Animation2: number?}?","desc":""},{"name":"fall","lua_type":"number?","desc":""},{"name":"swim","lua_type":"number?","desc":""},{"name":"swimIdle","lua_type":"number?","desc":""},{"name":"climb","lua_type":"number?","desc":""}],"source":{"line":35,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}},{"name":"path","desc":"```lua\\nlocal Animations = require(game.ReplicatedStorage.Animations.Package.AnimationsServer)\\n\\n\\n-- These are all valid options for retrieving an animation track\\nlocal animationPath = \\"Jump\\" -- A single key (any type)\\n\\nlocal animationPath = {\\"Dodge\\", Vector3.xAxis} -- An array path (values of any type)\\n\\nlocal animationPath = \\"Climb.Right\\" -- A path seperated by \\".\\" (string)\\n\\n\\nlocal animationTrack = Animations:GetTrack(player, animationPath)\\n```","lua_type":"any","source":{"line":56,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}}],"name":"AnimationsServer","desc":":::note\\nRoblox model path: `Animations.Package.AnimationsServer`\\n:::","realm":["Server"],"source":{"line":69,"path":"src/ReplicatedStorage/Animations/Package/AnimationsServer.lua"}}')}}]);